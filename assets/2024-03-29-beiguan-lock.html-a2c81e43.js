import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-dc536a7e.js";const p={},o=e(`<p>乐观锁和悲观锁是比较高频的面试题，是每个面试者必备 知识。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>乐观锁和悲观锁是两种截然相反的思想，用于解决并发场景中的数据竞争的问题。</p><ul><li>乐观锁：认为数据不会被竞争，在执行查询操作的时候不会上锁，只会在更新的时候会判断一下在此期间是否被别人修改了数据；如果修改了则放弃操作，否则，执行成功。</li><li>悲观锁：在操作数据的时候比较悲观，认为别人会修改数据，因此在操作数据之前会获取锁，如果获取成功会将数据加锁，直到操作完成后才会释放锁。上锁期间，其他人无法读取数据。</li></ul><h2 id="实现形式" tabindex="-1"><a class="header-anchor" href="#实现形式" aria-hidden="true">#</a> 实现形式</h2><p><strong>乐观锁和悲观锁是两种思想，它们的使用是非常广泛的，不局限于某种编程语言或数据库。</strong></p><h4 id="悲观锁的实现方式" tabindex="-1"><a class="header-anchor" href="#悲观锁的实现方式" aria-hidden="true">#</a> 悲观锁的实现方式</h4><p>悲观锁的实现方式是加锁，比如java语言中的synchronised关键字、golang语言的sync.Lock类。悲观锁在编程中使用的比较频繁。</p><h4 id="乐观锁的实现方式" tabindex="-1"><a class="header-anchor" href="#乐观锁的实现方式" aria-hidden="true">#</a> 乐观锁的实现方式</h4><p>乐观锁的主要实现形式有CAS和版本号机制。</p><p><strong>CAS（Compare And Swap）</strong></p><p>CAS是一种并发编程中常用的原子操作，用于在多线程环境下实现数据的同步和并发控制。</p><p>CAS操作包含了三个操作数：</p><ol><li>内存位置（通常是一个地址或者指针），即需要读写的变量或者内存位置。</li><li>预期值（Expected Value），即当前内存位置所期望的值。</li><li>新值（New Value），即将要写入到内存位置的新值。</li></ol><p>CAS操作的逻辑如下：</p><ul><li>首先，读取内存位置的当前值，与预期值进行比较。</li><li>如果当前值等于预期值，则将内存位置更新为新值。</li><li>如果当前值不等于预期值，则不进行任何操作。</li></ul><p>在执行CAS操作时，如果内存位置的当前值等于预期值，则说明在比较和写入之间没有其他线程对该内存位置进行了修改，此时CAS操作可以成功完成。如果当前值不等于预期值，说明有其他线程已经修改了该内存位置，此时CAS操作会失败。</p><p>CAS包含了Compare和Swap两个操作，它又如何保证原子性呢？</p><p>答案是CAS（Compare And Swap）是一种原子操作，其原子性是在硬件层面进行保证的。在支持CAS的系统中，CPU提供了特殊的指令来执行CAS操作，这些指令可以确保CAS操作的原子性。</p><p><strong>版本号机制实现</strong></p><p>版本号机制是实现乐观锁的一种实现方式。在使用版本号机制实现乐观锁时，每个数据记录都会关联一个版本号，当数据被修改时，版本号需要更新，通常是在原来的版本的基础之上加 1。</p><p>乐观锁基于以下假设：</p><ul><li>在数据操作期间，不会有其他事务对相同数据进行修改。</li><li>当一个事务要更新数据时，它首先会读取当前数据的版本号，然后执行更新操作。</li><li>在提交更新之前，事务会再次检查数据的版本号是否仍然与初始读取时的版本号相同。 <ul><li>如果版本号未发生变化，说明在操作过程中没有其他事务对数据进行修改，事务可以顺利提交更新；</li><li>如果版本号发生了变化，说明其他事务已经修改了数据，当前事务则需要根据具体情况进行重试或者放弃更新操作。</li></ul></li></ul><h2 id="mysql实现悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#mysql实现悲观锁和乐观锁" aria-hidden="true">#</a> Mysql实现悲观锁和乐观锁</h2><p>在 MySQL 中，悲观锁和乐观锁的实现方式有所不同：</p><p><strong>MySQL 悲观锁</strong>：</p><ul><li>MySQL 支持使用 <code>SELECT ... FOR UPDATE</code> 语句来进行悲观锁定。当执行这个语句时，MySQL 会将选定的行锁定，直到事务结束或者提交后才会释放锁。</li><li>通过 <code>FOR UPDATE</code> 子句，MySQL 会在选定的行上设置排他锁，其他事务在对这些行进行更新或者删除操作时会被阻塞，直到当前事务释放锁。</li><li>悲观锁在处理并发写操作时保证数据的一致性，但会增加数据库的锁竞争，可能降低系统的并发性能。</li></ul><p><strong>MySQL 乐观锁</strong>：</p><ul><li>在 MySQL 中，乐观锁通常通过添加一个版本号来实现。</li><li>在进行更新操作时，先读取数据的版本号或者时间戳，然后在更新时比较读取到的版本号或者时间戳与当前数据库中的版本号或者时间戳是否一致。</li><li>如果一致，说明数据没有被其他事务修改，可以顺利完成操作；如果不一致，说明数据已经被其他事务修改，当前事务可以选择重试或者放弃操作。</li><li>乐观锁不会在整个操作过程中持有锁，因此可以提高并发性能，但需要应用程序代码中进行逻辑判断和处理。</li></ul><p>举个使用MySQL实现乐观锁的例子：</p><p>假设我们有一个名为 <code>orders</code> 的表，结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span>
    order_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    <span class="token keyword">status</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，插入一些示例数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders <span class="token punctuation">(</span>order_id<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;待确认&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们使用 SQL 来模拟两个用户尝试同时修改订单状态的情况，实现乐观锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 读取订单的当前状态和版本号</span>
<span class="token keyword">SELECT</span> <span class="token keyword">status</span><span class="token punctuation">,</span> version <span class="token keyword">INTO</span> <span class="token variable">@current_status</span><span class="token punctuation">,</span> <span class="token variable">@current_version</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 检查版本号是否匹配</span>
<span class="token keyword">IF</span> <span class="token variable">@current_version</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> version <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span>
    <span class="token comment">-- 更新订单状态和版本号</span>
    <span class="token keyword">UPDATE</span> orders <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;已取消&#39;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token variable">@current_version</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token string">&#39;订单已取消&#39;</span> <span class="token keyword">AS</span> message<span class="token punctuation">;</span>
<span class="token keyword">ELSE</span>
    <span class="token keyword">SELECT</span> <span class="token string">&#39;订单更新失败：版本号不匹配&#39;</span> <span class="token keyword">AS</span> message<span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>

<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>

<span class="token comment">-- 用户B尝试确认订单</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 读取订单的当前状态和版本号</span>
<span class="token keyword">SELECT</span> <span class="token keyword">status</span><span class="token punctuation">,</span> version <span class="token keyword">INTO</span> <span class="token variable">@current_status</span><span class="token punctuation">,</span> <span class="token variable">@current_version</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 检查版本号是否匹配</span>
<span class="token keyword">IF</span> <span class="token variable">@current_version</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> version <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span>
    <span class="token comment">-- 更新订单状态和版本号</span>
    <span class="token keyword">UPDATE</span> orders <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;已确认&#39;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token variable">@current_version</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token string">&#39;订单已确认&#39;</span> <span class="token keyword">AS</span> message<span class="token punctuation">;</span>
<span class="token keyword">ELSE</span>
    <span class="token keyword">SELECT</span> <span class="token string">&#39;订单更新失败：版本号不匹配&#39;</span> <span class="token keyword">AS</span> message<span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>

<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们首先使用 <code>SELECT</code> 语句读取订单的当前状态和版本号，然后使用 <code>UPDATE</code> 语句来更新订单的状态和版本号。在更新之前，我们检查当前版本号是否与初始版本号匹配，如果匹配则更新订单状态和版本号，否则更新失败。</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/common/wxcode.png" alt="方志朋_官方公众号" tabindex="0" loading="lazy"><figcaption>方志朋_官方公众号</figcaption></figure>`,38),l=[o];function t(c,i){return n(),a("div",null,l)}const k=s(p,[["render",t],["__file","2024-03-29-beiguan-lock.html.vue"]]);export{k as default};
