import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-159f5b81.js";const t={},p=e(`<h2 id="linkedlist的类结构图" tabindex="-1"><a class="header-anchor" href="#linkedlist的类结构图" aria-hidden="true">#</a> LinkedList的类结构图</h2><p>LinkedList是java集合中比较常见的线性表的数据结构，是用于存储单列数据的容器。LinkedList除了继承AbstractSequentialList之外，同时还实现了Deque、Cloneable、Serializable 接口，也就是说LinkedList可以被当做队列使用，还支持快复制、序列化。</p><p>如下图，LinkedList的类结构图如下：</p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/11/29/image-20231129214140591.png" alt="image-20231129214140591" style="zoom:50%;"><p>LinkedList的底层数据结构是使用一个双向的链表结构实现的，链表中的每个节点（Node）都包含两个引用，prev指向当前节点前一个节点，next指向当前节点后一个节点，可以从头结点遍历到尾结点，也可以从尾结点遍历到头结点。</p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/11/29/image-20231129223331968.png" alt="image-20231129223331968" style="zoom:50%;"><p>LinkedList类主要由LinkedList和它的内部类Node构成，这两个类的UML图如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+------------------+
|    LinkedList    |
+------------------+
| - size : int     |
| - first : Node   |
| - last : Node    |
+------------------+
| + add(E element) |
| + remove()       |
| + get(int index) |
| + size()         |
+------------------+

+-------------------+
|       Node        |
+-------------------+
| - item : E        |
| - next : Node     |
| - prev : Node     |
+-------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LinkedList</code> 类是 LinkedList 的主要类。它包含了 <code>size</code>、<code>first</code> 和 <code>last</code> 三个实例变量，分别表示链表的大小、头结点和尾节点。</p><ul><li><code>add(E element)</code> 方法用于在链表尾部添加元素。</li><li><code>remove()</code> 方法用于删除链表头部的元素。</li><li><code>get(int index)</code> 方法用于获取指定索引位置上的元素。</li><li><code>size()</code> 方法用于返回链表的大小。</li></ul><p><code>Node</code> 类是 LinkedList 内部定义的节点类。它包含了 <code>item</code>、<code>next</code> 和 <code>prev</code> 三个实例变量，分别表示节点的数据、下一个节点和上一个节点。</p><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><p>LinkedList 类的构造函数有两个重载的构造函数，其中是一个无参的构造函数，没有任何的代码，因为它是双链表结构，不需要初始化容量长度等，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个构造函数可以穿入一个Collection接口的实现类对象，将Collection中的元素都添加到LinkedList中，它的源码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    public LinkedList(Collection&lt;? extends E&gt; c) {
        this();
        addAll(c);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-e-e-方法" tabindex="-1"><a class="header-anchor" href="#add-e-e-方法" aria-hidden="true">#</a> add(E e)方法</h2><p>LinkedList 的 add(E e) 方法用于在链表的尾部添加元素。 add(E e) 方法的源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        last<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>add(E e)</code> 方法先调用 <code>linkLast(e)</code> 方法来执行元素的插入操作。</li><li>在 <code>linkLast(e)</code> 方法中，首先创建一个新的节点 <code>newNode</code>，节点的数据为指定的元素 <code>e</code>，前向节点为链表的当前尾节点 <code>last</code>，后向节点为 null。</li><li>如果链表的尾节点 <code>last</code> 为 null，说明链表为空链表，即当前插入的节点即为头节点，将 <code>first</code> 设置为 <code>newNode</code>。</li><li>如果链表的尾节点 <code>last</code> 不为 nul，将当前尾节点 <code>last</code> 的后向节点指向 <code>newNode</code>，即将 <code>last.next</code> 设置为 <code>newNode</code>。</li><li>最后，将链表的尾节点 <code>last</code> 更新为 <code>newNode</code>，并增加链表的大小 <code>size</code>。</li><li>方法返回 true，表示插入操作成功。</li></ul><h2 id="get-int-index-方法" tabindex="-1"><a class="header-anchor" href="#get-int-index-方法" aria-hidden="true">#</a> get(int index)方法</h2><p>LinkedList 的 get(int index) 方法用于获取链表中指定索引处的元素。 get(int index) 方法的源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果索引位于链表的前半段，从头节点开始向后遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果索引位于链表的后半段，从尾节点开始向前遍历</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;Index: &quot;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&quot;, Size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>get(int index)</code> 方法先调用 <code>checkElementIndex(index)</code> 方法检查索引是否有效，如果索引无效，则抛出 <code>IndexOutOfBoundsException</code> 异常。</li><li>然后调用 <code>node(index)</code> 方法，根据索引获取对应的节点。</li><li>在 <code>node(int index)</code> 方法中，如果索引 index 小于链表大小的一半，说明索引位于链表的前半段，从头节点开始向后遍历，找到对应的节点并返回。</li><li>如果索引 index 大于等于链表大小的一半，说明索引位于链表的后半段，从尾节点开始向前遍历，找到对应的节点并返回。</li><li>最后，在获取到对应节点后，返回节点的数据域 <code>item</code>。</li></ul><h2 id="remove-int-index-方法" tabindex="-1"><a class="header-anchor" href="#remove-int-index-方法" aria-hidden="true">#</a> remove(int index)方法</h2><p>LinkedList 的 remove(int index) 方法用于删除链表中指定索引处的元素。下面是 remove(int index) 方法的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        first <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;Index: &quot;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&quot;, Size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><ul><li><code>remove(int index)</code> 方法先调用 <code>checkElementIndex(index)</code> 方法检查索引是否有效，如果索引无效，则抛出 <code>IndexOutOfBoundsException</code> 异常。</li><li>然后调用 <code>unlink(node(index))</code> 方法，根据索引获取对应的节点，并进行删除操作。 <ul><li>在 <code>unlink(Node&lt;E&gt; x)</code> 方法中，首先保存节点 <code>x</code> 的数据到 <code>element</code> 中。</li><li>然后获取节点 <code>x</code> 的前向节点 <code>prev</code> 和后向节点 <code>next</code>。</li><li>如果节点 <code>x</code> 的前向节点 <code>prev</code> 为 null，即 <code>x</code> 为头节点，则将头节点指向 <code>x</code> 的后向节点 <code>next</code>。</li><li>否则，将节点 <code>x</code> 的前向节点 <code>prev</code> 的后向节点指向 <code>x</code> 的后向节点 <code>next</code>，即 <code>prev.next = next</code>。并将节点 <code>x</code> 的前向节点 <code>prev</code> 的前向引用置为 null，即 <code>x.prev = null</code>。</li><li>同样的方式，如果节点 <code>x</code> 的后向节点 <code>next</code> 为 null，即 <code>x</code> 为尾节点，则将尾节点指向 <code>x</code> 的前向节点 <code>prev</code>。</li><li>否则，将节点 <code>x</code> 的后向节点 <code>next</code> 的前向节点指向 <code>x</code> 的前向节点 <code>prev</code>，即 <code>next.prev = prev</code>。并将节点 <code>x</code> 的后向节点 <code>next</code> 的后向引用置为 null，即 <code>x.next = null</code>。</li><li>接着将节点 <code>x</code> 的数据域 <code>item</code> 置为 null，减小链表的大小 <code>size</code>。</li><li>最后返回删除节点的数据域。</li></ul></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>LinkedList 是通过双向链表实现的数据结构，每个节点有前向和后向两个指针，用来连接上一个节点和下一个节点。这种结构使得在插入和删除元素时具有较高的效率，因为只需要修改节点的指针，而无需移动其他元素。</p><p>LinkedList 提供了多种方法来操作链表，包括在链表的头部或尾部插入元素、在指定位置插入元素、获取指定位置的元素、删除指定位置的元素等等。这使得 LinkedList 在需要频繁插入和删除元素的场景下很有优势。</p><p>然而，LinkedList 在访问元素时相对较慢，因为需要从头部或尾部开始遍历链表。与数组相比，LinkedList 的内存占用较高，因为每个节点需要额外的存储空间来保存前向和后向指针。</p><p>综上所述，LinkedList 是一个适用于插入和删除操作频繁的数据结构，但对于随机访问和占用内存方面可能存在劣势。</p>`,34),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","2023-11-29-linkedlist-source.html.vue"]]);export{k as default};
