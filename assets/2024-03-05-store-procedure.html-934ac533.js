import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as a}from"./app-ec9ed2c1.js";const o={},l=a(`<h2 id="什么是存储过程" tabindex="-1"><a class="header-anchor" href="#什么是存储过程" aria-hidden="true">#</a> 什么是存储过程</h2><p>存储过程（Stored Procedure）是预先定义在数据库管理系统中的一组 SQL 语句集合，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程通常用于执行一系列复杂的数据库操作或特定的业务逻辑，可以被应用程序通过调用来执行。</p><p>存储过程相对于sql语句有以下的优势：</p><ul><li>性能很高：存储过程在数据库服务器上执行，减少了网络传输和数据处理时间，尤其在处理大量数据或复杂逻辑时表现更明显。</li><li>安全性很高：存储过程只需要传参数，可以有效的防止SQL注入</li><li>简化维护和分离业务逻辑：将业务逻辑封装在存储过程中，可以降低应用和数据库之间的耦合度。</li></ul><h2 id="为什么不推荐使用存储过程" tabindex="-1"><a class="header-anchor" href="#为什么不推荐使用存储过程" aria-hidden="true">#</a> 为什么不推荐使用存储过程</h2><p>首先来看一下存储过程的使用示例，以下是一个简单的 MySQL 存储过程示例，用于查询指定用户的订单数量：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> <span class="token comment">//</span>

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetOrderCount<span class="token punctuation">(</span><span class="token operator">IN</span> userId <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> orderCount <span class="token keyword">INT</span><span class="token punctuation">;</span>
    
    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> orderCount
    <span class="token keyword">FROM</span> orders
    <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> userId<span class="token punctuation">;</span>
    
    <span class="token keyword">SELECT</span> orderCount <span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token comment">//</span>

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中：</p><ul><li>创建了一个名为 <code>GetOrderCount</code> 的存储过程，接受一个名为 <code>userId</code> 的输入参数。</li><li>使用 <code>DECLARE</code> 声明了一个本地变量 <code>orderCount</code>，用于存储订单数量。</li><li>使用 <code>SELECT COUNT(*) INTO</code> 查询订单数量，并将结果赋值给 <code>orderCount</code> 变量。</li><li>最后通过 <code>SELECT</code> 语句返回订单数量。</li></ul><p>要调用该存储过程，可以使用以下 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CALL</span> GetOrderCount<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>123</code> 是要查询订单数量的用户 ID。调用此存储过程后，将返回该用户的订单数量。</p><p>从上面的示例可以看出尽管可以将比较复杂的业务逻辑封装在存储过程里，但是有以下的致命弱点：</p><ul><li><p>可移植性非常差：存储过程的语法和特性在不同的数据库管理系统中可能有所差异，这会导致数据库迁移的时候会面临灾难性的后果。</p></li><li><p>可读性差：存储过程通常包含大量的代码，这可能导致可读性非常差。</p></li><li><p>可调试性差：相比将业务逻辑放在应用程序代码中，存储过程的可调试性非常的差。</p></li><li><p>维护困难：存储过程通常可能是由DBA人员维护的，应用开发人员在使用存储过程需要和DBA沟通，另外维护维护是非常困难的。</p></li></ul><p>阿里巴巴的开发手册里明确不推荐使用存储过程：</p><blockquote><p>因为Mysql不会考虑不受其控制的操作成本，存储过程难以调试和扩展，更没有移植性。</p></blockquote><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/common/wxcode.png" alt="方志朋_官方公众号" tabindex="0" loading="lazy"><figcaption>方志朋_官方公众号</figcaption></figure>`,17),i=[l];function c(p,d){return s(),e("div",null,i)}const u=n(o,[["render",c],["__file","2024-03-05-store-procedure.html.vue"]]);export{u as default};
