import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as d,a as e,b as t,d as l,f as r}from"./app-bacdb836.js";const n={},u=r(`<p>prometheus的时间序列是通过指标名和一组标签来唯一定义。指标的名称是监控样本的标识，而标签组是监控样本的多个维度特征的反应，所以可以通过标签进行对指标的筛选、过滤、聚合、转换等计算，计算的结果会产生一条新的时间序列。</p><p>promql是Prometheus提供的数据查询语言，可以对时间序列提供丰富的查询。promql被广泛应用于指标视图的配置、告警语句的配置，它是一个基础能力，类似于mysql的sql查询语句。</p><h3 id="瞬时向量查询-instant-vector-selectors" tabindex="-1"><a class="header-anchor" href="#瞬时向量查询-instant-vector-selectors" aria-hidden="true">#</a> 瞬时向量查询（Instant vector selectors）</h3><p>我们可以直接输入指标名查询所有的这个指标名的时间序列，比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的语句等同于：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以在grafana上查询，获取了prometheus_http_requests_total指标的不同标签维度的所有指标，一共有53个。</p><figure><img src="https://static.javajike.com/img/2023/10/14/image-20231014210829763.png" alt="image-20231014210829763" tabindex="0" loading="lazy"><figcaption>image-20231014210829763</figcaption></figure><p>可以筛选出handler=“/metrics&quot;接口的数据，在grafana执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler=&quot;/metrics&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://static.javajike.com/img/2023/10/14/image-20231014210912914.png" alt="image-20231014210912914" tabindex="0" loading="lazy"><figcaption>image-20231014210912914</figcaption></figure><p>另外也可以筛选出handler!=“/metrics&quot;的所有的数据，查询语句为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler!=&quot;/metrics&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用多个标签值进行进行查询，比如查询handler为&quot;/metrics“和handler为&quot;/api/v1/labels&quot;的指标情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler=~&quot;/metrics|/api/v1/labels&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理，也查询handler不为&quot;/metrics“和handler不为&quot;/api/v1/labels&quot;的指标情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler!~&quot;/metrics|/api/v1/labels&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用<code>.*</code>通配符进行模糊匹配查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler=~&quot;/metric.*&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>小结：</p><p>使用标签筛选数据的使用，可以使用完全匹配：</p><ul><li>label = value</li><li>lable =~ value | value2</li></ul><p>也可以进行模糊匹配：</p><ul><li>label =~ value.*</li></ul><p>取反操作</p><ul><li>label != value</li><li>Label !~ value1 |value2</li><li>Label !~ value.*</li></ul><h2 id="范围向量查询-range-vector-selectors" tabindex="-1"><a class="header-anchor" href="#范围向量查询-range-vector-selectors" aria-hidden="true">#</a> 范围向量查询（Range Vector Selectors）</h2><p>通过Instant vector selectors查询，返回值只会包含该时间序列的最新值的一个样本，它是一个瞬时向量结果。如果我们想查询一个时间区间的样本，可以使用范围矢量查询。范围向量表达式和瞬时向量表达式之间的差异在于在区间向量表达式中我们需要定义时间选择的范围，时间范围通过时间范围选择器<code>[]</code>进行定义。例如，通过以下表达式可以选择最近5分钟内的所有样本数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler=&quot;/metrics&quot;}[5m]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://static.javajike.com/img/2023/10/14/image-20231014211256244.png" alt="image-20231014211256244" tabindex="0" loading="lazy"><figcaption>image-20231014211256244</figcaption></figure><p>时间范围除了支持分钟（m)外，还还支持</p><ul><li>秒（s)</li><li>分钟（m）</li><li>小时（h）</li><li>天（d）</li><li>周（w）</li><li>年（y）</li></ul><h2 id="offset-时间位移操作" tabindex="-1"><a class="header-anchor" href="#offset-时间位移操作" aria-hidden="true">#</a> offset 时间位移操作</h2><p>瞬时向量查询和范围向量查询的表达式中，都是以当前时间为基准的，比如：</p><ul><li>prometheus_http_requests_total{}，查询当前时间的最新值</li><li>prometheus_http_requests_total{}[5m]，查询的是当前时间的过去五分钟的数据。</li></ul><p>如果想查询五分钟前的数据，获取昨天的当前时间同一时刻的五分钟的数据，怎么查询呢，我们可以使用offset关键字：</p><ul><li>prometheus_http_requests_total{} offset 5m，查询五分钟前的最新值</li><li>prometheus_http_requests_total{}[5m] offset 1d，查询的是昨天的当前时间同一时刻的五分钟的数据</li></ul><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h2><h3 id="数学操作符" tabindex="-1"><a class="header-anchor" href="#数学操作符" aria-hidden="true">#</a> 数学操作符</h3><p>Promql支持常见的逻辑和数学操作符，这些操作符使用于瞬时向量的查询，常见的逻辑运算符如下</p><ul><li><code>+</code> (addition) 加</li><li><code>-</code> (subtraction) 减</li><li><code>*</code> (multiplication) 乘</li><li><code>/</code> (division) 除</li><li><code>%</code> (modulo) 取模</li><li><code>^</code> (power/exponentiation) 幂运算</li></ul><p>在作用于两个瞬时向量之间，左侧的标签条目和右侧的标签条目必须要相同，否则将匹配不到，不会输出结果。如果匹配到了，会将计算结果输出到新的向量上，向量里面的标签是左侧和右侧共同匹配的标签，指标名将会被删除。</p><p>例如下面的查询语句不会输出任何结果，因为两个handler标签值不一样。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{handler=&quot;/metrics&quot;}+prometheus_http_requests_total{handler=&quot;/api/v1/labels&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再比如下面的查询语句的可以输出结果，因为左侧的表达式有一个handler=&quot;/metrics&quot;，右侧的表达式也有一个handler=&quot;/metrics&quot;标签，完全匹配，所以能够输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(prometheus_http_requests_total{handler=&quot;/metrics&quot;})by(handler)+sum(prometheus_http_request_duration_seconds_count{handler=&quot;/metrics&quot;})by(handler)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="比较操作符" tabindex="-1"><a class="header-anchor" href="#比较操作符" aria-hidden="true">#</a> 比较操作符</h3><p>promql还支持常见的比较运算符，比如：</p><ul><li><code>==</code> (equal)</li><li><code>!=</code> (not-equal)</li><li><code>&gt;</code> (greater-than)</li><li><code>&lt;</code> (less-than)</li><li><code>&gt;=</code> (greater-or-equal)</li><li><code>&lt;=</code> (less-or-equal)</li></ul><p>当比较运算符左右与两个瞬时向量之间，同操作运算符一样，左侧的标签条目和右侧的标签条目必须要相同，否则将匹配不到，不会输出结果。</p><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>逻辑运算符作用于两个瞬时向量之间，支持的逻辑运算符如下：</p><ul><li><code>and</code> (intersection) 求交集</li><li><code>or</code> (union) 求并集</li><li><code>unless</code> (complement)</li></ul><p>当比较运算符左右与两个瞬时向量之间，同操作运算符一样，左侧的标签条目和右侧的标签条目必须要相同，否则将匹配不到，不会输出结果。</p><h2 id="向量匹配符号-vector-matching" tabindex="-1"><a class="header-anchor" href="#向量匹配符号-vector-matching" aria-hidden="true">#</a> 向量匹配符号 Vector matching</h2><p>在上面讲解的操作符，比如左侧和右侧的向量标签组条目必须完全匹配才能进行计算。在promql中也可以使用向量匹配符去计算含有不同标签条组的向量之间的计算，promql提供了两个向量匹配符号</p><ul><li>on （匹配）</li><li>Ignoring （忽略）</li></ul><p>使用上面的Vector matching，可以应用于One-to-one vector matches（一对一）和Many-to-one and one-to-many vector matches（一对多或者多对一）</p><h3 id="分组修改器-group-modifiers" tabindex="-1"><a class="header-anchor" href="#分组修改器-group-modifiers" aria-hidden="true">#</a> 分组修改器 Group modifiers</h3><p>分组修改器可以实现many-to-one/one-to-many的向量匹配，通常使用以下的关键字：</p><ul><li><code>group_left</code></li><li><code>group_right</code></li></ul><p>分组修改器可以一边的标签组赋值给另一边的查询结构。</p><p><strong>举例子讲解</strong></p><p>比如有以下的时间序列的样本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m{method=&quot;get&quot;, code=&quot;500&quot;}  24
method_code:http_errors:rate5m{method=&quot;get&quot;, code=&quot;404&quot;}  30
method_code:http_errors:rate5m{method=&quot;put&quot;, code=&quot;501&quot;}  3
method_code:http_errors:rate5m{method=&quot;post&quot;, code=&quot;500&quot;} 6
method_code:http_errors:rate5m{method=&quot;post&quot;, code=&quot;404&quot;} 21

method:http_requests:rate5m{method=&quot;get&quot;}  600
method:http_requests:rate5m{method=&quot;del&quot;}  34
method:http_requests:rate5m{method=&quot;post&quot;} 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用以下的查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m{code=&quot;500&quot;} / ignoring(code) method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到的结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{method=&quot;get&quot;}  0.04            //  24 / 600
{method=&quot;post&quot;} 0.05            //   6 / 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不用ignoring修改器，将得不到任何结果。</p><p>使用group_left修改器进行查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m / ignoring(code) group_left method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到的结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{method=&quot;get&quot;, code=&quot;500&quot;}  0.04            //  24 / 600
{method=&quot;get&quot;, code=&quot;404&quot;}  0.05            //  30 / 600
{method=&quot;post&quot;, code=&quot;500&quot;} 0.05            //   6 / 120
{method=&quot;post&quot;, code=&quot;404&quot;} 0.175           //  21 / 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><p>Prometheus提供非常的多的聚合函数，可以用来聚合耽搁瞬时向量，聚合完后的结果会生成根据聚合标签生成一个新的序列：</p><ul><li><code>sum</code> (calculate sum over dimensions)</li><li><code>min</code> (select minimum over dimensions)</li><li><code>max</code> (select maximum over dimensions)</li><li><code>avg</code> (calculate the average over dimensions)</li><li><code>group</code> (all values in the resulting vector are 1)</li><li><code>stddev</code> (calculate population standard deviation over dimensions)</li><li><code>stdvar</code> (calculate population standard variance over dimensions)</li><li><code>count</code> (count number of elements in the vector)</li><li><code>count_values</code> (count number of elements with the same value)</li><li><code>bottomk</code> (smallest k elements by sample value)</li><li><code>topk</code> (largest k elements by sample value)</li><li><code>quantile</code> (calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions)</li></ul><p>基本查询格式是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;aggr-op&gt; [without|by (&lt;label list&gt;)] ([parameter,] &lt;vector expression&gt;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如prometheus_http_requests_total这个指标有4个标签，分别是code、handler、instance、job（其中job为采集任务、instance为被采集的实例，这两个标签对于同一个实例来说基本不变）， timeseries格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以计算所有handler、code的的请求总数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum by (handler, code) (prometheus_http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它同等于：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum without (instance, job) (prometheus_http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想计算所有的请求的总数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(prometheus_http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取请求次数最多的5个请求，可以用topk函数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>topk(5,sum by (handler, code) (prometheus_http_requests_total))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="其他常见的函数" tabindex="-1"><a class="header-anchor" href="#其他常见的函数" aria-hidden="true">#</a> 其他常见的函数</h2><h3 id="计算counter的增长率" tabindex="-1"><a class="header-anchor" href="#计算counter的增长率" aria-hidden="true">#</a> 计算counter的增长率</h3><p>可以使用increase函数计算增量数据，比如计算最近5分钟的请求次数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>increase(prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;}[5m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里使用prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;}[5m]获取最近五分钟的样本，用increase函数算出五分钟的增量。</p><p>那么每秒的增量率，可以将上面的结果除以300，可以使用以下的表达式进行计算：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>increase(prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;}[5m])/(60*5)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了使用increase函数计算增量外，可以使用rate函数计算速率，上面的表达式等价于：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rate(prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;}[5m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是使用rate或者increase函数去计算样本的平均增长速率，容易陷入“长尾问题”当中，其无法反应在时间窗口内样本数据的突发变化。 例如，对于请求数量在5分钟的时间窗口内，可能在某一时刻访问量突增，但是通过计算在时间窗口内的平均增长率却无法反应出该问题。</p><p>为了解决该问题，PromQL提供了另外一个灵敏度更高的函数irate(v range-vector)。irate同样用于计算区间向量的计算率，但是其反应出的是瞬时增长率。irate函数是通过区间向量中最后两个样本数据来计算区间向量的增长速率。这种方式可以避免在时间窗口范围内的“长尾问题”，并且体现出更好的灵敏度，通过irate函数绘制的图标能够更好的反应样本数据的瞬时变化状态。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>irate(prometheus_http_requests_total{code=&quot;200&quot;,handler=&quot;/metrics&quot;}[5m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="预测指标变化趋势" tabindex="-1"><a class="header-anchor" href="#预测指标变化趋势" aria-hidden="true">#</a> 预测指标变化趋势</h3><p>predict_linear函数是用来基于当定的时间范围的时序来预测未来一段时间的数据，函数的格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>predict_linear(v range-vector, t scalar)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，基于5小时的样本数据，来预测主机可用磁盘空间的是否在24个小时候被占满，可以使用如下表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>predict_linear(node_filesystem_free{job=&quot;node&quot;}[5h], 24 * 3600) &lt; 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="计算分位数" tabindex="-1"><a class="header-anchor" href="#计算分位数" aria-hidden="true">#</a> 计算分位数</h3><p>Histogram类型的指标可以使用histogram_quantile函数进行计算，函数格式为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>histogram_quantile(φ scalar, b instant-vector)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如有以下的指标prometheus_http_request_duration_seconds_bucket</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090&quot;, job=&quot;prometheus&quot;, le=&quot;0.1&quot;}  3767

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;0.2&quot;}  3769

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;0.4&quot;} 3773

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;1&quot;} 3775

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;3&quot;} 3776

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;8&quot;} 3776

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;20&quot;} 3776

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;60&quot;} 3776

prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;120&quot;} 3776


prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;,instance=&quot;localhost:9090, job=&quot;prometheus&quot;, le=&quot;Infinity&quot;} 3776
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算handler=&quot;/metrics&quot;接口的p90耗时：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>histogram_quantile(0.9, sum by (handler,le) (rate(prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;}[1m])))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>计算p99耗时的表达式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>histogram_quantile(0.99, sum by (handler,le) (rate(prometheus_http_request_duration_seconds_bucket{handler=&quot;/metrics&quot;}[1m])))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,117),c={href:"https://prometheus.io/docs/prometheus/latest/querying/basics/",target:"_blank",rel:"noopener noreferrer"};function m(p,h){const a=s("ExternalLinkIcon");return o(),d("div",null,[u,e("p",null,[t("本文快速的讲解了promql的查询、操作符、函数，并通过案例进行了实战。详细内容可以查看官方网站："),e("a",c,[t("https://prometheus.io/docs/prometheus/latest/querying/basics/"),l(a)])])])}const g=i(n,[["render",m],["__file","2023-10-05-promql.html.vue"]]);export{g as default};
