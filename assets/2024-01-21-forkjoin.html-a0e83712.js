import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as p,a as n,b as e,d as c,f as i}from"./app-4b8de602.js";const l={},u=i(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Java Fork/Join 是 Java 7 引入的一个框架，用于实现并行计算。它基于 &quot;分而治之&quot; 的思想，使用递归的方式将一个大任务拆分成多个小任务，然后并行地执行这些小任务，最后将结果合并起来得到最终结果。</p><p>Fork/Join的运行流程大致如下所示：</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/1/21/image-20240121201736740.png" alt="image-20240121201736740" tabindex="0" loading="lazy"><figcaption>image-20240121201736740</figcaption></figure><h2 id="核心模块" tabindex="-1"><a class="header-anchor" href="#核心模块" aria-hidden="true">#</a> 核心模块</h2><p>Java Fork/Join 框架的核心是 <code>ForkJoinPool</code> 类，它是一个特殊的线程池，内部使用工作窃取算法来实现任务的并行执行。</p><p>Fork/Join 框架中的主要组件包括：</p><ol><li><p><code>ForkJoinPool</code>：是一个线程池，用于执行 Fork/Join 任务。它管理和调度任务的执行，并可根据需要创建新的工作线程。</p></li><li><p><code>ForkJoinTask</code>：是一个抽象类，表示 Fork/Join 框架中的任务。<code>ForkJoinTask</code> 分为两个子类：</p><ul><li><p><code>RecursiveTask</code>：用于返回结果的任务，继承它并实现 <code>compute()</code> 方法来执行任务并返回结果。</p></li><li><p><code>RecursiveAction</code>：用于不返回结果的任务，继承它并实现 <code>compute()</code> 方法来执行任务。</p></li></ul></li></ol><h3 id="forkjoinpool继承关系" tabindex="-1"><a class="header-anchor" href="#forkjoinpool继承关系" aria-hidden="true">#</a> ForkJoinPool继承关系</h3><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/1/21/java-thread-x-forkjoin-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>内部类介绍:</p><ul><li>ForkJoinWorkerThreadFactory: 内部线程工厂接口，用于创建工作线程ForkJoinWorkerThread</li><li>DefaultForkJoinWorkerThreadFactory: ForkJoinWorkerThreadFactory 的默认实现类</li><li>InnocuousForkJoinWorkerThreadFactory: 实现了 ForkJoinWorkerThreadFactory，无许可线程工厂，当系统变量中有系统安全管理相关属性时，默认使用这个工厂创建工作线程。</li><li>EmptyTask: 内部占位类，用于替换队列中 join 的任务。</li><li>ManagedBlocker: 为 ForkJoinPool 中的任务提供扩展管理并行数的接口，一般用在可能会阻塞的任务(如在 Phaser 中用于等待 phase 到下一个generation)。</li><li>WorkQueue: ForkJoinPool 的核心数据结构，本质上是work-stealing 模式的双端任务队列，内部存放 ForkJoinTask 对象任务，使用 @Contented 注解修饰防止伪共享。 <ul><li>工作线程在运行中产生新的任务(通常是因为调用了 fork())时，此时可以把 WorkQueue 的数据结构视为一个栈，新的任务会放入栈顶(top 位)；工作线程在处理自己工作队列的任务时，按照 LIFO 的顺序。</li><li>工作线程在处理自己的工作队列同时，会尝试窃取一个任务(可能是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的队列任务)，此时可以把 WorkQueue 的数据结构视为一个 FIFO 的队列，窃取的任务位于其他线程的工作队列的队首(base位)。</li></ul></li><li>伪共享状态: 缓存系统中是以缓存行(cache line)为单位存储的。缓存行是2的整数幂个连续字节，一般为32-256个字节。最常见的缓存行大小是64个字节。当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。</li></ul><h2 id="forkjointask继承关系" tabindex="-1"><a class="header-anchor" href="#forkjointask继承关系" aria-hidden="true">#</a> ForkJoinTask继承关系</h2><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/1/21/java-thread-x-forkjoin-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>ForkJoinTask 实现了 Future 接口，说明它也是一个可取消的异步运算任务，实际上ForkJoinTask 是 Future 的轻量级实现，主要用在纯粹是计算的函数式任务或者操作完全独立的对象计算任务。fork 是主运行方法，用于异步执行；而 join 方法在任务结果计算完毕之后才会运行，用来合并或返回计算结果。 其内部类都比较简单，ExceptionNode 是用于存储任务执行期间的异常信息的单向链表；其余四个类是为 Runnable/Callable 任务提供的适配器类，用于把 Runnable/Callable 转化为 ForkJoinTask 类型的任务(因为 ForkJoinPool 只可以运行 ForkJoinTask 类型的任务)。</p><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><p>以下是一个简单的使用 Fork/Join 框架的示例，假设我们要计算一个较大数组中所有元素的总和：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>forezp<span class="token punctuation">.</span>concurrentlab<span class="token punctuation">.</span>threadpool</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveTask</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinExample</span> <span class="token punctuation">{</span>

   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SumTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THRESHOLD</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 设置阈值，小于该阈值的任务将不再细分，直接计算结果</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> array<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Long</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果任务足够小，直接计算结果</span>
                <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 否则细分为更小的子任务</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token class-name">SumTask</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SumTask</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 异步执行左边的子任务</span>
                <span class="token keyword">long</span> rightResult <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步执行右边的子任务</span>
                <span class="token keyword">long</span> leftResult <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取左边子任务的结果</span>
                <span class="token keyword">return</span> leftResult <span class="token operator">+</span> rightResult<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 假设有一个很大的数组</span>

        <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> result <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步执行任务，并获取结果</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sum: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个继承 <code>RecursiveTask</code> 的 <code>SumTask</code> 类来表示计算数组元素总和的任务。在 <code>compute()</code> 方法中，我们检查了任务的大小是否小于阈值，如果小于阈值，则直接计算结果；否则将任务拆分为更小的子任务，并使用 <code>fork()</code> 和 <code>join()</code> 方法实现子任务的并行执行和结果的合并。</p><p>具体将任务拆成了四个子任务：</p><ul><li>1+2</li><li>3+4</li><li>5+6</li><li>7+8</li></ul><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/1/21/image-20240121211859054.png" alt="image-20240121211859054" tabindex="0" loading="lazy"><figcaption>image-20240121211859054</figcaption></figure><p>最终等待子任务执行完成，合并结果。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,24),r={href:"https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=o("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",r,[e("https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html"),c(s)])])])}const b=a(l,[["render",k],["__file","2024-01-21-forkjoin.html.vue"]]);export{b as default};
