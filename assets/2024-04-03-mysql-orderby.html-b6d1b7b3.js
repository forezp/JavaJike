import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as o,f as t}from"./app-c1521a7f.js";const e={},g=t('<p>Mysql的Order by 是经常使用的语法，为某个字段或者是多个字段进行排序。那么这个排序功能是怎么实现的呢？</p><p>在 MySQL 中，<code>ORDER BY</code> 语句的实现根据实际的字段的是否有索引，会涉及不同的技术：</p><ol><li><strong>使用索引排序</strong>：如果查询中的列有适当的索引，并且该索引能够满足 <code>ORDER BY</code> 子句中的排序条件，MySQL 可能会使用索引来执行排序操作。这种情况下，MySQL 可以利用 B 树索引的有序性来返回有序的结果集，而无需进行额外的排序操作。</li><li><strong>使用临时表</strong>：如果没有合适的索引可用，或者查询中的排序条件复杂，MySQL 可能会使用临时表来执行排序操作。MySQL 在内存或磁盘上创建一个临时表，将查询的结果插入到该表中，然后对临时表进行排序。如果数据量较小且内存足够，MySQL 可能会将临时表存储在内存中，否则会存储在磁盘上。</li><li><strong>文件排序</strong>：对于大型数据集或者内存不足的情况，MySQL 可能会执行文件排序。它会将查询的结果写入临时文件，并使用外部排序算法对该文件进行排序。这种情况下，MySQL 会尽量减少磁盘 I/O 的次数，以提高性能。</li></ol><p>比如有一个user库：</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/4/6/image-20240406210141044.png" alt="image-20240406210141044" tabindex="0" loading="lazy"><figcaption>image-20240406210141044</figcaption></figure><p>表中有四行数据：</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/4/6/image-20240406210200024.png" alt="image-20240406210200024" tabindex="0" loading="lazy"><figcaption>image-20240406210200024</figcaption></figure><p>如果对主键进行order by ，会使用主键索引。如果对非索引字段age进行order by排序，不会使用索引，且会使用文件排序，如下图所示：</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2024/4/6/image-20240406210259215.png" alt="image-20240406210259215" tabindex="0" loading="lazy"><figcaption>image-20240406210259215</figcaption></figure>',9),c=[g];function r(s,n){return a(),o("div",null,c)}const p=i(e,[["render",r],["__file","2024-04-03-mysql-orderby.html.vue"]]);export{p as default};
