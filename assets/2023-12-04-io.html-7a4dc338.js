import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,f as a}from"./app-64ea0df5.js";const r={},l=a('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Java IO（Input/Output）是 Java 编程语言用于处理输入和输出的标准库。它提供了处理文件、流、网络传输等操作的类和接口。</p><p>IO流主要包括字节流和字符流两种类型，以及文件操作、网络通信和对象序列化等功能。Java IO 可以处理二进制和文本数据，并提供了高效的缓冲流和便捷的文件操作。</p><h2 id="io流基本类" tabindex="-1"><a class="header-anchor" href="#io流基本类" aria-hidden="true">#</a> <strong>IO流基本类</strong></h2><p>Java IO库提供了多个基本的IO流类，主要包括以下几类：</p><ol><li><p>字节流（Byte Streams）：</p><ul><li><code>InputStream</code>：抽象类，用于从源中读取字节数据。</li><li><code>OutputStream</code>：抽象类，用于将字节数据写入目标。</li></ul></li><li><p>字符流（Character Streams）：</p><ul><li><code>Reader</code>：抽象类，用于从源中读取字符数据。</li><li><code>Writer</code>：抽象类，用于将字符数据写入目标。</li></ul></li><li><p>缓冲流（Buffered Streams）：</p><ul><li><code>BufferedInputStream</code>：字节缓冲流，用于提供更高效的字节读取功能。</li><li><code>BufferedOutputStream</code>：字节缓冲流，用于提供更高效的字节写入功能。</li><li><code>BufferedReader</code>：字符缓冲流，用于提供更高效的字符读取功能。</li><li><code>BufferedWriter</code>：字符缓冲流，用于提供更高效的字符写入功能。</li></ul></li><li><p>文件操作：</p><ul><li><code>File</code>：表示文件或目录的抽象类，提供了相关操作方法。</li><li><code>FileInputStream</code>：用于从文件中读取字节数据的流。</li><li><code>FileOutputStream</code>：用于将字节数据写入文件的流。</li><li><code>FileReader</code>：用于从文件中读取字符数据的流。</li><li><code>FileWriter</code>：用于将字符数据写入文件的流。</li></ul></li></ol><p>这些基本的IO流类提供了在Java程序中进行输入输出操作的基础功能。</p><p><strong>字符流 VS 字节流</strong></p><p>字符流的由来： 因为数据编码的不同，而有了对字符进行高效操作的流对象。本质其实就是基于字节流读取时，去查了指定的码表。 字节流和字符流的区别：</p><ul><li>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</li><li>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。</li></ul><p>结论：只要是处理纯文本数据，就优先考虑使用字符流。 除此之外都使用字节流。</p><h2 id="java流类图结构" tabindex="-1"><a class="header-anchor" href="#java流类图结构" aria-hidden="true">#</a> Java流类图结构</h2><p>JavaIO的类图结构如下：</p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204151718877.png" alt="image-20231204151718877" tabindex="0" loading="lazy"><figcaption>image-20231204151718877</figcaption></figure><h2 id="java-io流对象" tabindex="-1"><a class="header-anchor" href="#java-io流对象" aria-hidden="true">#</a> Java IO流对象</h2><p>**1.输入字节流InputStream **</p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204154342206.png" alt="image-20231204154342206" style="zoom:67%;"><p>InputStream 是所有的输入字节流的父类，它是一个抽象类，提供了基本的类操作方法，被许多具体的子类继承和实现。</p><ul><li>ByteArrayInputStream、StringBufferInputStream、FileInputStream 是三种基本的介质流，它们分别从Byte 数组、StringBuffer、和本地文件中读取数据。</li><li>PipedInputStream 是从与其它线程共用的管道中读取数据。</li><li>ObjectInputStream 和所有FilterInputStream 的子类都是装饰流（装饰器模式的主角）。 <ul><li><code>BufferedInputStream</code>：缓冲输入流，提供了读取数据的高效能力，可以减少实际读取操作对底层资源的访问。</li><li><code>DataInputStream</code>：处理二进制数据，提供了读取基本数据类型（如 int、double 等）的方法。</li><li><code>PushbackInputStream</code>：允许将读取的字节推回输入流中，提供了 <code>unread()</code> 方法。</li></ul></li></ul><p><strong>2.输出字节流OutputStream</strong></p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204154856650.png" alt="image-20231204154856650" style="zoom:67%;"><p>OutputStream 是 Java IO 库中用于写入字节数据的抽象类。它也是一个顶级父类，被许多具体的子类继承和实现.</p><ul><li>ByteArrayOutputStream、FileOutputStream 是两种基本的介质流，它们分别向Byte 数组、和本地文件中写入数据。</li><li>PipedOutputStream 是向与其它线程共用的管道中写入数据，</li><li>ObjectOutputStream 和所有FilterOutputStream 的子类都是装饰流。 <ul><li><code>BufferedOutputStream</code>：缓冲输出流，提供了写入数据的高效能力，可以减少实际写入操作对底层资源的访问。</li><li><code>DataOutputStream</code>：处理二进制数据，提供了写入基本数据类型（如 int、double 等）的方法。</li></ul></li></ul><p><strong>3.字节流的输入与输出的对应</strong></p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204163641954.png" alt="image-20231204163641954" style="zoom:50%;"><p>图中蓝色的为主要的对应部分，红色的部分就是不对应部分。紫色的虚线部分代表这些流一般要搭配使用。从上面的图中可以看出Java IO 中的字节流是极其对称的。“存在及合理”我们看看这些字节流中不太对称的几个类吧！</p><ul><li>LineNumberInputStream 主要完成从流中读取数据时，会得到相应的行号，至于什么时候分行、在哪里分行是由改类主动确定的，并不是在原始中有这样一个行号。在输出部分没有对应的部分，我们完全可以自己建立一个LineNumberOutputStream，在最初写入时会有一个基准的行号，以后每次遇到换行时会在下一行添加一个行号，看起来也是可以的。好像更不入流了。</li><li>PushbackInputStream 的功能是查看最后一个字节，不满意就放入缓冲区。主要用在编译器的语法、词法分析部分。输出部分的BufferedOutputStream 几乎实现相近的功能。</li><li>StringBufferInputStream 已经被Deprecated，本身就不应该出现在InputStream 部分，主要因为String 应该属于字符流的范围。已经被废弃了，当然输出部分也没有必要需要它了！还允许它存在只是为了保持版本的向下兼容而已。</li><li>SequenceInputStream 可以认为是一个工具类，将两个或者多个输入流当成一个输入流依次读取。完全可以从IO 包中去除，还完全不影响IO 包的结构，却让其更“纯洁”――纯洁的Decorator 模式。</li><li>PrintStream 也可以认为是一个辅助工具。主要可以向其他输出流，或者FileInputStream 写入数据，本身内部实现还是带缓冲的。本质上是对其它流的综合运用的一个工具而已。一样可以踢出IO 包！System.out 和System.out 就是PrintStream 的实例！</li></ul><p><strong>4.字符输入流Reader</strong></p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204160344248.png" alt="image-20231204160344248" style="zoom:67%;"><p>Reader 是 Java IO 库中用于读取字符数据的抽象类。它是一个顶级父类，被许多具体的子类继承和实现。</p><ul><li>CharArrayReader、StringReader 是两种基本的介质流，它们分别将Char 数组、String中读取数据。</li><li>PipedReader 是从与其它线程共用的管道中读取数据。</li><li>BufferedReader 很明显就是一个装饰器，它和其子类负责装饰其它Reader 对象。</li><li>FilterReader 是所有自定义具体装饰流的父类，其子类PushbackReader 对Reader 对象进行装饰，会增加一个行号。</li><li>InputStreamReader 将字节流转换为字符流，是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。 <ul><li>FileReader 可以说是一个达到此功能、常用的工具类，在其源代码中明显使用了将FileInputStream 转变为Reader 的方法。我们可以从这个类中得到一定的技巧。</li></ul></li></ul><p><strong>5.字符输出流Writer</strong></p><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/image-20231204160429902.png" alt="image-20231204160429902" style="zoom:67%;"><p>在上面的关系图中可以看出：</p><p>Writer 是 Java IO 库中用于写入字符数据的抽象类。它也是一个顶级父类，被许多具体的子类继承和实现。</p><ul><li>CharArrayWriter、StringWriter 是两种基本的介质流，它们分别向Char 数组、String 中写入数据</li><li>PipedWriter 是向与其它线程共用的管道中写入数据</li><li>BufferedWriter 是一个装饰器为Writer ，提供了字符缓冲功能，增加了写入字符的效率，并提供了一行一行写入字符的方法。</li><li>PrintWriter 和PrintStream 极其类似，功能和使用也非常相似。</li><li>OutputStreamWriter 是OutputStream 到Writer转换的桥梁 <ul><li>它的子类FileWriter ：将字符写入到文件中。</li></ul></li></ul><p><strong>6.字符流的输入与输出的对应</strong></p><figure><img src="https://static-1254191423.cos.ap-shanghai.myqcloud.com/img/2023/12/4/v2-6143c718ee1d52290fdceda927598aea_1440w.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>7.字符流与字节流转换</strong></p><p>转换流的特点：</p><ul><li>字符流和字节流之间相互转换</li><li>可对读取到的字节数据经过指定编码转换成字符</li><li>可对读取到的字符数据经过指定编码转换成字节</li></ul><p>何时使用转换流？</p><ul><li>当字节和字符之间有转换动作时；</li><li>流操作的数据需要编码或解码时。 具体的对象体现：</li><li>InputStreamReader:字节到字符的桥梁</li><li>OutputStreamWriter:字符到字节的桥梁</li></ul><p>这两个流对象是字符体系中的成员，它们有转换作用，本身又是字符流，所以在构造的时候需要传入字节流对象进来。</p><p><strong>8.File类</strong></p><p>File类是对文件系统中文件以及文件夹进行封装的对象，可以通过对象的思想来操作文件和文件夹。 File类保存文件或目录的各种元数据信息，包括文件名、文件长度、最后修改时间、是否可读、获取当前文件的路径名，判断指定文件是否存在、获得当前目录中的文件列表，创建、删除文件和目录等方法。</p><p><strong>9.RandomAccessFile类</strong> 该对象并不是流体系中的一员，其封装了字节流，同时还封装了一个缓冲区（字符数组），通过内部的指针来操作字符数组中的数据。 该对象特点：</p><ul><li>该对象只能操作文件，在构造函数接收两种类型的参数：字符串文件路径；File对象。</li><li>该对象既可以对文件进行读操作，也能进行写操作，在进行对象实例化时可指定操作模式(r,rw) 注意：该对象在实例化时，如果要操作的文件不存在，会自动创建；如果文件存在，写数据未指定位置，会从头开始写，即覆盖原有的内容。 可以用于多线程下载或多个线程同时写数据到文件。</li></ul>',48),p=[l];function u(o,c){return i(),t("div",null,p)}const m=e(r,[["render",u],["__file","2023-12-04-io.html.vue"]]);export{m as default};
